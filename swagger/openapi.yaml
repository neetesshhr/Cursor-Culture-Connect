openapi: 3.1.0
info:
  title: Culture Connect API
  description: API documentation for the Culture Connect application
  version: 1.0.0
  
servers:
  - url: http://localhost:5002/api
    description: Local development server
  
tags:
  - name: Auth
    description: Authentication operations
  - name: User
    description: User operations
  - name: Groups
    description: Group management operations
  - name: Events
    description: Event management operations
  - name: Notifications
    description: Notification operations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        fullName:
          type: string
        university:
          type: string
        culturalBackground:
          type: string
        bio:
          type: string
        avatar:
          type: string
        languages:
          type: array
          items:
            type: string
        heritage:
          type: array
          items:
            type: string
        major:
          type: string
        year:
          type: string

    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        category:
          type: string
        location:
          type: string
        isPublic:
          type: boolean
        image:
          type: string
        memberCount:
          type: integer
        universityOnly:
          type: boolean
        allowedUniversity:
          type: string
        meetingTime:
          type: string
        meetingDate:
          type: string
        meetingLocation:
          type: string
        meetingDays:
          type: array
          items:
            type: string
        isMember:
          type: boolean
        isAdmin:
          type: boolean
        isPresident:
          type: boolean
        hasPendingRequest:
          type: boolean
        president:
          $ref: '#/components/schemas/User'
    
    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        date:
          type: string
        time:
          type: string
        location:
          type: string
        category:
          type: array
          items:
            type: string
        organizer:
          type: string
        maxAttendees:
          type: integer
        image:
          type: string
        price:
          type: string
        universityOnly:
          type: boolean
        allowedUniversity:
          type: string
        status:
          type: string
          enum: [pending, approved, rejected]
        isAttending:
          type: boolean
        isFavorite:
          type: boolean
        attendeeCount:
          type: integer
    
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
        title:
          type: string
        message:
          type: string
        read:
          type: boolean
        relatedId:
          type: string
        relatedType:
          type: string
        sender:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    
    SignupRequest:
      type: object
      required:
        - username
        - email
        - password
        - fullName
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        fullName:
          type: string
        university:
          type: string
        culturalBackground:
          type: string
    
    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    
    ErrorResponse:
      type: object
      properties:
        error:
          type: boolean
        message:
          type: string
        details:
          type: string
    
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Creates a new user account (.edu email required)
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email or username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login a user
      description: Authenticates a user and returns a JWT token
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout a user
      description: Logs out the current user
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /auth/me:
    get:
      tags:
        - Auth
      summary: Get current user
      description: Returns the currently authenticated user
      responses:
        '200':
          description: Current user details
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/update-profile:
    put:
      tags:
        - User
      summary: Update user profile
      description: Updates the current user's profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                bio:
                  type: string
                linkedIn:
                  type: string
                major:
                  type: string
                year:
                  type: string
                culturalBackground:
                  type: string
                heritage:
                  type: array
                  items:
                    type: string
                languages:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /groups:
    get:
      tags:
        - Groups
      summary: Get all groups
      description: Returns a list of all groups
      responses:
        '200':
          description: List of groups
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
    post:
      tags:
        - Groups
      summary: Create a new group
      description: Creates a new group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - category
              properties:
                name:
                  type: string
                description:
                  type: string
                category:
                  type: string
                location:
                  type: string
                isPublic:
                  type: boolean
                image:
                  type: string
                universityOnly:
                  type: boolean
                allowedUniversity:
                  type: string
                meetingTime:
                  type: string
                meetingDate:
                  type: string
                meetingLocation:
                  type: string
                meetingDays:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  group:
                    $ref: '#/components/schemas/Group'

  /groups/my-groups:
    get:
      tags:
        - Groups
      summary: Get current user's groups
      description: Returns groups the current user is a member of
      responses:
        '200':
          description: List of user's groups
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'

  /groups/{id}:
    get:
      tags:
        - Groups
      summary: Get a group by ID
      description: Returns details of a specific group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group details
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  group:
                    $ref: '#/components/schemas/Group'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{groupId}/join:
    post:
      tags:
        - Groups
      summary: Request to join a group
      description: Sends a request to join a group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: Optional message to the group admins
      responses:
        '200':
          description: Join request sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Already a member or has pending request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{groupId}/join-requests:
    get:
      tags:
        - Groups
      summary: Get pending join requests
      description: Returns pending join requests for a group (admin only)
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of pending join requests
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  requests:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        requester:
                          $ref: '#/components/schemas/User'
                        status:
                          type: string
                        message:
                          type: string
                        createdAt:
                          type: string
                          format: date-time

  /groups/join-requests/{requestId}:
    put:
      tags:
        - Groups
      summary: Respond to join request
      description: Approve or reject a group join request (admin only)
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [approved, rejected]
      responses:
        '200':
          description: Request response processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events:
    get:
      tags:
        - Events
      summary: Get all events
      description: Returns a list of all approved events
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
    post:
      tags:
        - Events
      summary: Create a new event
      description: Creates a new event (pending approval)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - date
                - time
                - location
                - category
                - groupId
              properties:
                title:
                  type: string
                description:
                  type: string
                date:
                  type: string
                time:
                  type: string
                location:
                  type: string
                category:
                  type: array
                  items:
                    type: string
                organizer:
                  type: string
                maxAttendees:
                  type: integer
                image:
                  type: string
                price:
                  type: string
                universityOnly:
                  type: boolean
                allowedUniversity:
                  type: string
                groupId:
                  type: string
      responses:
        '201':
          description: Event created and pending approval
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  event:
                    $ref: '#/components/schemas/Event'

  /events/my-events:
    get:
      tags:
        - Events
      summary: Get current user's events
      description: Returns events the current user is attending, has favorited, or created
      responses:
        '200':
          description: List of user's events
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  events:
                    type: object
                    properties:
                      attending:
                        type: array
                        items:
                          $ref: '#/components/schemas/Event'
                      favorited:
                        type: array
                        items:
                          $ref: '#/components/schemas/Event'
                      created:
                        type: array
                        items:
                          $ref: '#/components/schemas/Event'

  /events/{id}:
    get:
      tags:
        - Events
      summary: Get an event by ID
      description: Returns details of a specific event
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  event:
                    $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/{eventId}/rsvp:
    post:
      tags:
        - Events
      summary: RSVP to an event
      description: Toggles RSVP status for an event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: RSVP status updated
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  isAttending:
                    type: boolean

  /events/{eventId}/favorite:
    post:
      tags:
        - Events
      summary: Favorite an event
      description: Toggles favorite status for an event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Favorite status updated
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  isFavorite:
                    type: boolean

  /events/group/{groupId}:
    get:
      tags:
        - Events
      summary: Get events for a group
      description: Returns events for a specific group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of group events
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'

  /events/requests/pending:
    get:
      tags:
        - Events
      summary: Get pending event requests
      description: Returns pending event approval requests for the current user's admin groups
      responses:
        '200':
          description: List of pending event requests
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  requests:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        group:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                        eventRequests:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              status:
                                type: string
                              message:
                                type: string
                              creator:
                                $ref: '#/components/schemas/User'

  /events/requests/{requestId}:
    put:
      tags:
        - Events
      summary: Respond to event request
      description: Approve or reject an event request (admin only)
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [approved, rejected]
                message:
                  type: string
                  description: Optional message explaining decision (especially for rejection)
      responses:
        '200':
          description: Request response processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /notifications:
    get:
      tags:
        - Notifications
      summary: Get all notifications
      description: Returns all notifications for the current user
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'

  /notifications/unread-count:
    get:
      tags:
        - Notifications
      summary: Get unread notification count
      description: Returns the count of unread notifications for the current user
      responses:
        '200':
          description: Unread notification count
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer

  /notifications/{notificationId}/read:
    put:
      tags:
        - Notifications
      summary: Mark notification as read
      description: Marks a specific notification as read
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /notifications/read-all:
    put:
      tags:
        - Notifications
      summary: Mark all notifications as read
      description: Marks all notifications as read for the current user
      responses:
        '200':
          description: All notifications marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse' 